{-# OPTIONS_HADDOCK hide #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}

import           System.IO (BufferMode(..), hSetBuffering, stdout, stderr)
import           System.Exit (exitFailure)
import           Data.Maybe (isJust, fromJust)
import           Control.Monad (unless)
import           Control.Monad.Catch (MonadCatch(..))
import           Hedgehog
import qualified Hedgehog.Gen as Gen
import qualified Hedgehog.Range as Range
import           Data.Array
import           Codec.Binary.QRCode


shortFailures :: [(Int, ErrorLevel, Mode, String)]
shortFailures =
    -- https://github.com/kizzx2/haskell-qrcode/issues/7
    [ (1, H, Numeric, "268")
    -- https://github.com/kizzx2/haskell-qrcode/issues/5
    , (40, L, Alphanumeric
    -- https://github.com/kizzx2/haskell-qrcode/issues/1
    , (15, L, Alphanumeric, "HELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HEHELLO WORLD HELLO WORLD HE")
    , (7, Q, EightBit, "\NUL")
    , (5, Q, EightBit, "\NUL\NUL\NUL\NUL\NUL\NUL")
    , (2, Q, Alphanumeric, "0PA8M")
    , (4, H, Alphanumeric, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN5XMFYZDNCM5UH")
    , (13, Q, Alphanumeric, "T1JPZRXUGST$M%::J")
    , (16, H, Alphanumeric, "0000000000000000000000000000000000000000000000000000000000000000")
    , (7, M, Numeric, "7038935389817588382403234418665196039788216355301578947135350196854")
    ]

alphaNumeric :: Gen Char
alphaNumeric = Gen.element "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"

assertMatrix :: (MonadTest m, MonadCatch m) => Maybe Matrix -> m ()
assertMatrix m = do
    assert . isJust $ m
    -- Collect all of the undefined indices
    let arr = toArray (fromJust m) :: Array (Int, Int) Bool
    evalM $ mapM_ (\e -> e `seq` pure ()) (elems arr)

prop_shortFailures :: Property
prop_shortFailures =
    property $ do
        (v, e, m, s) <- forAll $ Gen.element shortFailures
        assertMatrix $ encode (fromJust $ version v) e m s

prop_encode_alphanumeric :: Property
prop_encode_alphanumeric =
    property $ do
        Just ver <- forAll $ version <$> Gen.int (Range.linear 2 20)
        e <- forAll $ Gen.element [ L, M, Q, H ]
        s <- forAll $ Gen.string (Range.linear 1 1000) alphaNumeric
        assertMatrix $ encode ver e Alphanumeric s

prop_encode_numeric :: Property
prop_encode_numeric =
    property $ do
        Just ver <- forAll $ version <$> Gen.int (Range.linear 2 20)
        e <- forAll $ Gen.element [ L, M, Q, H ]
        s <- forAll $ Gen.string (Range.linear 1 1000) Gen.digit
        assertMatrix $ encode ver e Numeric s

prop_encode_eightbit :: Property
prop_encode_eightbit = property $ do
    Just ver <- forAll $ version <$> Gen.int (Range.linear 4 20)
    e <- forAll $ Gen.element [ L, M, Q, H ]
    s <- forAll $ Gen.string (Range.linear 1 1000) Gen.latin1
    assertMatrix $ encode ver e EightBit s

tests :: IO Bool
tests =
  checkParallel $$(discover)

main :: IO ()
main = do
    hSetBuffering stdout LineBuffering
    hSetBuffering stderr LineBuffering
    result <- tests
    unless result exitFailure
